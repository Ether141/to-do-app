<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:customControls="clr-namespace:ToDoAppClient.Controls">

    <Style x:Key="mainButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="{DynamicResource backgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource thirdBackgroundBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="{StaticResource poppins}" />
        <Setter Property="Foreground" Value="{DynamicResource foregroundBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonPressedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="settingsButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="330" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource backgroundBrush}"/>
        <Setter Property="BorderThickness" Value="0 1 0 1"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="{StaticResource poppins}" />
        <Setter Property="Foreground" Value="{DynamicResource foregroundBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonHoverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonPressedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="imageButton" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <Border.Background>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                        <Rectangle Fill="{TemplateBinding Background}"/>
                                        <Image Source="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="20" Height="20" RenderOptions.BitmapScalingMode="HighQuality"/>
                                    </Grid>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource foregroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource alphaForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type customControls:TitlebarNavButton}" TargetType="{x:Type customControls:TitlebarNavButton}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Width" Value="36"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Icon" Value="{DynamicResource closeIcon}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:TitlebarNavButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>

                        <Border.Background>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Grid Width="36" Height="24">
                                        <Rectangle Fill="{TemplateBinding Background}"/>
                                        <Image Source="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="11" Height="11" Opacity="0.5"/>
                                    </Grid>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource secondBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource secondBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="ButtonType" Value="Close">
                <Setter Property="Icon" Value="{DynamicResource closeIcon}"/>
            </Trigger>
            <Trigger Property="ButtonType" Value="Maximize">
                <Setter Property="Icon" Value="{DynamicResource maximizeIcon}"/>
            </Trigger>
            <Trigger Property="ButtonType" Value="Minimize">
                <Setter Property="Icon" Value="{DynamicResource minimizeIcon}"/>
            </Trigger>
            <Trigger Property="ButtonType" Value="Windowed">
                <Setter Property="Icon" Value="{DynamicResource windowedIcon}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>